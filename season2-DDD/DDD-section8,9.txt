# - 第3部の目的
  ドメインを捉えたモデルを作るためのプロセスの紹介
  アプリケーションの要求に対応する設計の原則とパターンの紹介

# リファクタリングのレベル
## リファクタリングの目的
目的（概念レベル）　既存機能は残しつつ、設計をより柔軟にしたり理解しやすくしたりする。
　（安全性の確保のため、ユニットテストの自動化がある程度前提）
⇔対義として、機械的な変更（コードを読みやすくする、詳細なレベルの機能追加）

- 目的（意識レベル／目標）
 コードが何を行っているかを開発者が理解できるようになる
 __なぜそれを行うかを理解し、コードが行っている処理とその動機を関係づけられる。
　 即ち、ドメインエキスパートとコミュニケーションが取れるレベル。__

## 深いモデル
### オブジェクト分析
初級者向け：要件定義書の名詞と動詞を識別し、オブジェクトとメソッドとして使用する。
ドメイン設計向け：ドメインエキスパートの主要な関心事と、それに最も関連した知識で構成。
※名詞と動詞を識別し、オブジェクトとメソッドとして使用する方法がNGなのではなく、
　要件定義書ではなく、ドメインエキスパートの主要な関心事を追え、という理解

フィードバックは繰り返し行え

## ブレイクスルーの話
- まとめると
　ブレイクスルーは、ドメインに沿おうとしたリファクタリングの中で知識を得て起きた。
　金額計算の主体は、ファシリティ（ローン）ではなく、シェア比率であった。
　大きな変更も、ドメインに即したものに近づけるのであればやむを得ない。恐怖を乗り越える必要がある。
　ブレイクスルーが次のブレイクスルーを産み出す。

# 第9部導入部
良質なドメインモデルを創り出すには、暗黙的だった概念を明示的にしていく必要がある。
⇒繰り返しリファクタリングと知識のかみ砕きが必要になる。

## 良質なモデルを創り出す手段
設計のぎこちない点やエキスパートの発言で矛盾すると思われるところを詳細に調べ、実験する
オブジェクトが必要な理由を把握する。
エキスパートの反応はドメインを正確に理解しているかの材料になる
設計にない言葉が出てきたときは、そこが改善点になる

## 概念を掘り出すためにすること。
　1. 言葉に耳を傾ける
　3. ぎこちなさを精査する
　4. 矛盾について塾講する。
　5. 文献を読む（業務を体系化した書籍）
　5. 何度でも挑戦すること

## それほど明白でない概念をモデル化する方法。
1. 明示的な制約
　単純な不変条件の強制は、内容量を変更できる各操作で、条件付きロジックを使用する。
　- 危ない例
　　制約を評価するために、本来であればオブジェクトの定義に合わないデータが必要になる。
　　関連するルールが複数のオブジェクトに出てきて、コードを重複させなければならなくなったり、
　　本来であれば同じ系統でないオブジェクトを継承しなければならなくなったりする。
　　設計や要求に関する多くの会話が制約をめぐって行われるが、実装では制約が手続き型のコードの中に隠れている

　制約によってオブジェクトの基本責務が不明確な場合、制約をくくりだす。

オブジェクトは手続きをカプセル化し、その代わりに目標や意図について考えさせる。
サービスは、プロセスを明示的に表現しつつ極端に複雑なアルゴリズムを引き続きカプセル化する方法の一つ

プロセスを明示するか、隠蔽するかは、ドメインエキスパートが話題に上げるか、
コンピュータプログラムにおける仕組みの一部に過ぎないかで判断する。

オブジェクトは、「検証、選択、要求」に応じた構築を行う。

